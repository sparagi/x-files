test generation
generateHostParsingTests
	"Test parsing URIs with various hosts."
	"self generateHostParsingTests"
	| testSpecs |
	
	testSpecs := {
		"URI"					"Exception"	"Subclass of URIHostIdentifier"	"Accessor"	"Result"				"Comment"
		{'http://1.2.3.4/'.			nil.			URIIPv4Address.					'octets'.		'#(1 2 3 4)'.			'Byte order in a normal IPv4 address'}.
		{'http://255.255.255.255/'.	nil.			URIIPv4Address.					'octets'.		'#(255 255 255 255)'.	'Max octet size for a normal IPv4 address'}.
		{'http://0.0.0.0/'.			nil.			URIIPv4Address.					'octets'.		'#(0 0 0 0)'.			'Min octet size for a normal IPv4 address'}.																
		"IP v4 lookalikes"
		{'http://256.1.1.1/'.		nil.			URIRegisteredName.				'name'.		'256.1.1.1'.			'First IPv4 octet too large.'}.
		{'http://1.1000.1.1/'.		nil.			URIRegisteredName.				'name'.		'1.1000.1.1'.			'Second IPv4 octet too large.'}.
		{'http://1.1.256.1/'.		nil.			URIRegisteredName.				'name'.		'1.1.256.1'.			'Third IPv4 octet too large.'}.
		{'http://1.1.1.1000/'.		nil.			URIRegisteredName.				'name'.		'1.1.1.1000'.			'Fourth IPv4 octet too large.'}.	
		{'http://-1.0.0.1/'.		nil.			URIRegisteredName.				'name'.		'-1.0.0.1'.			'Negative number in IPv4 octet.'}.	
														
														}.

	1 to: testSpecs size do: [:testNumber | | testPair uriString comment testMethod |
			testPair := testSpecs at: testNumber.
			uriString := testPair first.
			comment := testPair last.
			testMethod := String streamContents: [:stream | stream
				nextPutAll: 'testHostParse'; nextPutAll: testNumber asString; cr;
				nextPutAll: '	"'; nextPutAll: comment; nextPutAll: '"'; cr;
				nextPutAll: '	"Automatically generated by class>>generateHostParsingTests; do not edit here."'; cr;
				nextPutAll: '	| uriString |'; cr;
				cr;
				nextPutAll: '	uriString := '''; nextPutAll: uriString; nextPutAll: '''.'; cr;
				cr;
				nextPutAll: '	self should: [URI fromString: uriString] raise: IllegalURI'; cr].
			self compile: testMethod classified: 'host']